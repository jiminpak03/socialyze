name: SociaLyze Desktop Release

on:
  push:
    tags:
      - "v*.*.*"        # e.g. v0.1.0
  workflow_dispatch:     # allow manual runs too

permissions:
  contents: write

# Use bash everywhere (even on Windows) unless overridden
defaults:
  run:
    shell: bash

env:
  # Change this if your Flutter app is not at repo root
  PROJECT_DIR: socialyze

jobs:
  build-desktop:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            build: windows
            zip: SociaLyze_Windows.zip
            out_path: build/windows/x64/runner/Release
          - os: macos-latest
            build: macos
            zip: SociaLyze_macOS.zip
            out_path: build/macos/Build/Products/Release
          - os: ubuntu-latest
            build: linux
            zip: SociaLyze_Linux.zip
            out_path: build/linux/x64/release/bundle
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Show workspace
        run: |
          echo "PWD:" && pwd
          echo "Root contents:" && ls -la
          echo "Project dir ($PROJECT_DIR) contents:" && ls -la "$PROJECT_DIR"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Install Linux build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config \
            libgtk-3-dev liblzma-dev libasound2-dev \
            libgl1-mesa-dev libx11-dev \
            libmpv-dev

      - name: flutter pub get
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter pub get

      - name: enable desktop target
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          case "${{ matrix.build }}" in
            windows) flutter config --enable-windows-desktop ;;
            macos)   flutter config --enable-macos-desktop ;;
            linux)   flutter config --enable-linux-desktop ;;
          esac

      - name: build
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter build ${{ matrix.build }} --release

      # ---------- ZIP PER PLATFORM (WRITE ZIP TO PROJECT_DIR) ----------

      - name: zip (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $Src = "${{ env.PROJECT_DIR }}\${{ matrix.out_path }}"
          $Dst = Join-Path $env:GITHUB_WORKSPACE "${{ env.PROJECT_DIR }}\${{ matrix.zip }}"
          Compress-Archive -Path "$Src\*" -DestinationPath "$Dst"
          Write-Host "Created ZIP at: $Dst"

      - name: zip (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          SRC="${GITHUB_WORKSPACE}/${{ env.PROJECT_DIR }}/${{ matrix.out_path }}"
          DST="${GITHUB_WORKSPACE}/${{ env.PROJECT_DIR }}/${{ matrix.zip }}"
          echo "Looking for .app in: $SRC"
          ls -la "$SRC" || true

          # Find the first .app produced by Flutter
          APP_BUNDLE_PATH="$(find "$SRC" -maxdepth 1 -type d -name '*.app' | head -n 1)"

          if [ -z "$APP_BUNDLE_PATH" ]; then
            echo "No .app bundle found in $SRC"
            exit 1
          fi

          APP_BUNDLE_NAME="$(basename "$APP_BUNDLE_PATH")"
          echo "Zipping: $APP_BUNDLE_NAME -> $DST"

          cd "$SRC"
          zip -r "$DST" "$APP_BUNDLE_NAME"
          echo "ZIP created at: $DST"


      - name: zip (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          SRC="${GITHUB_WORKSPACE}/${{ env.PROJECT_DIR }}/${{ matrix.out_path }}/.."
          DST="${GITHUB_WORKSPACE}/${{ env.PROJECT_DIR }}/${{ matrix.zip }}"
          cd "$SRC"
          if [ ! -d "bundle" ]; then
            echo "bundle/ not found in $SRC"
            ls -la
            exit 1
          fi
          echo "Zipping bundle/ -> $DST"
          zip -r "$DST" "bundle"
          echo "ZIP created at: $DST"

      # ---------- UPLOAD + ATTACH ----------

      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.zip }}
          path: ${{ env.PROJECT_DIR }}/${{ matrix.zip }}

      - name: Attach to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.PROJECT_DIR }}/${{ matrix.zip }}
