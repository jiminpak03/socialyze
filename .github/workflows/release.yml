name: SociaLyze Desktop Release

on:
  push:
    tags:
      - "v*.*.*"        # e.g. v0.1.0
  workflow_dispatch:     # allow manual runs too

permissions:
  contents: write        # needed to upload assets to Releases

# Use bash everywhere (even on Windows) unless overridden for a step
defaults:
  run:
    shell: bash

env:
  # Set this to the subfolder that contains your pubspec.yaml
  # If your Flutter app is at repo root, use "."
  PROJECT_DIR: socialyze

  # macOS app bundle name (adjust if your product name is different)
  APP_BUNDLE_NAME: SociaLyze.app

jobs:
  build-desktop:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            build: windows
            zip: SociaLyze_Windows.zip
            out_path: build/windows/x64/runner/Release
          - os: macos-latest
            build: macos
            zip: SociaLyze_macOS.zip
            out_path: build/macos/Build/Products/Release
          - os: ubuntu-latest
            build: linux
            zip: SociaLyze_Linux.zip
            out_path: build/linux/x64/release/bundle
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Show workspace
        run: |
          echo "Current directory:" && pwd
          echo "Root contents:" && ls -la
          echo "Project dir (${PROJECT_DIR}) contents:" && ls -la "${PROJECT_DIR}"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          # flutter-version: "3.22.x"  # Optional: pin a version

      - name: Install Linux build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Flutter pub get
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter pub get

      - name: Enable desktop target
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          case "${{ matrix.build }}" in
            windows) flutter config --enable-windows-desktop ;;
            macos)   flutter config --enable-macos-desktop ;;
            linux)   flutter config --enable-linux-desktop ;;
          esac

      - name: Build
        working-directory: ${{ env.PROJECT_DIR }}
        run: flutter build ${{ matrix.build }} --release

      # --- Zip per platform ---

      - name: Zip build (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: ${{ env.PROJECT_DIR }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          Compress-Archive -Path "${{ matrix.out_path }}\*" -DestinationPath "${{ matrix.zip }}"

      - name: Zip build (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          cd "${{ matrix.out_path }}"
          if [ ! -d "${APP_BUNDLE_NAME}" ]; then
            echo "App bundle '${APP_BUNDLE_NAME}' not found. Contents:"
            ls -la
            exit 1
          fi
          zip -r "../../${{ matrix.zip }}" "${APP_BUNDLE_NAME}"

      - name: Zip build (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          cd "${{ matrix.out_path }}/.."
          # 'bundle' contains the executable and libraries
          zip -r "../../${{ matrix.zip }}" "bundle"

      # --- Upload CI artifacts (optional but handy for debugging) ---
      - name: Upload artifact (CI)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.zip }}
          path: ${{ env.PROJECT_DIR }}/${{ matrix.zip }}

      # --- Attach to GitHub Release ---
      - name: Attach to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.PROJECT_DIR }}/${{ matrix.zip }}
